#include <Windows.h>
#include <stdio.h>

#define IOCTL_BLACK_LIST_FILE   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BLACK_LIST_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WHITE_LIST_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_INIT_AV           CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_TERMINATE_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DUMP_PROCESS_MEMORY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Dump info to recieve from userland
typedef struct _DUMP_INFO {
    ULONG pid;
    ULONG size;
    WCHAR dumpFilePath[260];  // Maximum path length
} DUMP_INFO, * PDUMP_INFO;


int wmain(int argc, wchar_t* argv[]) {
    
    if (!(argc == 3 || argc == 2 || argc == 7)) {
        wprintf(L"Usage:\n%s -block <filename>\n%s -blacklist <processname>\n%s -whitelist <processname> \n%s -init \n%s -kill <pid>\n%s -dump <pid> -size <bytes> -file <DOS file path>", argv[0], argv[0], argv[0], argv[0], argv[0], argv[0]);
        return 1;
    }

    DWORD ioctlCode;
    PVOID ioBuffer = NULL;
    DWORD ioBufferSize = 0;

    if (wcscmp(argv[1], L"-block") == 0 && argc == 3) {
        ioctlCode = IOCTL_BLACK_LIST_FILE;
        ioBuffer = argv[2];
        ioBufferSize = (wcslen(argv[2]) + 1) * sizeof(wchar_t);
    }
    else if (wcscmp(argv[1], L"-blacklist") == 0 && argc == 3) {
        ioctlCode = IOCTL_BLACK_LIST_PROCESS;
        ioBuffer = argv[2];
        ioBufferSize = (wcslen(argv[2]) + 1) * sizeof(wchar_t);
    }
    else if (wcscmp(argv[1], L"-whitelist") == 0 && argc == 3) {
        ioctlCode = IOCTL_WHITE_LIST_PROCESS;
        ioBuffer = argv[2];
        ioBufferSize = (wcslen(argv[2]) + 1) * sizeof(wchar_t);
    }
    else if (wcscmp(argv[1], L"-init") == 0 && argc == 2) {
        ioctlCode = IOCTL_INIT_AV;
    }
    else if (wcscmp(argv[1], L"-kill") == 0 && argc == 3) {
        ioctlCode = IOCTL_TERMINATE_PROCESS;
        ULONG pid = wcstoul(argv[2], NULL, 0);
        ioBuffer = &pid;
        ioBufferSize = sizeof(pid);
    }
    else if (wcscmp(argv[1], L"-dump") == 0 && argc == 7) {
        ioctlCode = IOCTL_DUMP_PROCESS_MEMORY;
        DUMP_INFO dumpInfo;
        dumpInfo.pid = wcstoul(argv[2], NULL, 0);
        dumpInfo.size = wcstoul(argv[4], NULL, 0);
        wcsncpy_s(dumpInfo.dumpFilePath, argv[6], _countof(dumpInfo.dumpFilePath) - 1);
        ioBuffer = &dumpInfo;
        ioBufferSize = sizeof(dumpInfo);
    }
    else {
        wprintf(L"Invalid command. Usage:\n%s -block <filename>\n%s -blacklist <processname>\n%s -whitelist <processname> \n%s -init \n%s -kill <pid>\n%s -dump <pid> -size <bytes> -file <DOS file path>", argv[0], argv[0], argv[0], argv[0], argv[0], argv[0]);
        return 1;
    }

    HANDLE hDevice = CreateFileW(L"\\\\.\\SugiotAV",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);
    if (hDevice == INVALID_HANDLE_VALUE) {
        wprintf(L"Failed to open device. Error: %d\n", GetLastError());
        return 1;
    }

    DWORD bytesReturned;
    BOOL result = DeviceIoControl(hDevice,
        ioctlCode,
        ioBuffer,
        ioBufferSize,
        NULL,
        0,
        &bytesReturned,
        NULL);

    if (!result) {
        wprintf(L"Failed to send IOCTL. Error: %d\n", GetLastError());
        CloseHandle(hDevice);
        return 1;
    }

    if (wcscmp(argv[1], L"-init") == 0) {
        wprintf(L"Antivirus settings have been initialized.\n");
    }
    else if (wcscmp(argv[1], L"-kill") == 0) {
        wprintf(L"Process with PID %lu has been terminated.\n", *(ULONG*)ioBuffer);
    }
    else {
        wprintf(L"Successfully sent command: %s for: %s\n", argv[1], argv[2]);
    }

    CloseHandle(hDevice);
    return 0;
}
