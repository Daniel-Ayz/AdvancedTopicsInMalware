#include <windows.h>
#include <iostream>
#include <thread>
#include <chrono>

bool isDebuggerPresent() {
    return IsDebuggerPresent();
}

bool checkGetTickCountDiscrepancy() {
    DWORD startTick = GetTickCount();
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    DWORD endTick = GetTickCount();
    DWORD elapsedTime = endTick - startTick;
    return (elapsedTime < 90 || elapsedTime > 110);
}

bool checkGetTickCount64Discrepancy() {
    ULONGLONG startTick = GetTickCount64();
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    ULONGLONG endTick = GetTickCount64();
    ULONGLONG elapsedTime = endTick - startTick;
    return (elapsedTime < 90 || elapsedTime > 110);
}


bool checkQueryPerformanceCounterDiscrepancy() {
    LARGE_INTEGER startCounter, endCounter, frequency;
    QueryPerformanceFrequency(&frequency);
    QueryPerformanceCounter(&startCounter);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    QueryPerformanceCounter(&endCounter);
    double elapsedTime = static_cast<double>(endCounter.QuadPart - startCounter.QuadPart) / frequency.QuadPart * 1000.0;
    return (elapsedTime < 90.0 || elapsedTime > 110.0);
}

bool checkTimeGetTimeDiscrepancy() {
    DWORD startTime = timeGetTime();
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    DWORD endTime = timeGetTime();
    DWORD elapsedTime = endTime - startTime;
    return (elapsedTime < 90 || elapsedTime > 110);
}

bool checkSystemTimeDiscrepancy() {
    SYSTEMTIME startTime, endTime;
    GetSystemTime(&startTime);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    GetSystemTime(&endTime);
    DWORD elapsedTime = (endTime.wSecond * 1000 + endTime.wMilliseconds) - (startTime.wSecond * 1000 + startTime.wMilliseconds);
    return (elapsedTime < 90 || elapsedTime > 110);
}

bool checkLocalTimeDiscrepancy() {
    SYSTEMTIME startTime, endTime;
    GetLocalTime(&startTime);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    GetLocalTime(&endTime);
    DWORD elapsedTime = (endTime.wSecond * 1000 + endTime.wMilliseconds) - (startTime.wSecond * 1000 + startTime.wMilliseconds);
    return (elapsedTime < 90 || elapsedTime > 110);
}

int main() {
    if (isDebuggerPresent()) {
        std::cout << "Debugger detected!" << std::endl;
    }
    else {
        std::cout << "No debugger detected." << std::endl;
    }

    if (checkGetTickCountDiscrepancy()) {
        std::cout << "GetTickCount discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No GetTickCount discrepancy detected." << std::endl;
    }

    if (checkGetTickCount64Discrepancy()) {
        std::cout << "GetTickCount64 discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No GetTickCount64 discrepancy detected." << std::endl;
    }

    if (checkQueryPerformanceCounterDiscrepancy()) {
        std::cout << "QueryPerformanceCounter discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No QueryPerformanceCounter discrepancy detected." << std::endl;
    }

    if (checkTimeGetTimeDiscrepancy()) {
        std::cout << "timeGetTime discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No timeGetTime discrepancy detected." << std::endl;
    }

    if (checkSystemTimeDiscrepancy()) {
        std::cout << "SystemTime discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No SystemTime discrepancy detected." << std::endl;
    }

    if (checkLocalTimeDiscrepancy()) {
        std::cout << "LocalTime discrepancy detected! Potential sandbox/VM environment." << std::endl;
    }
    else {
        std::cout << "No LocalTime discrepancy detected." << std::endl;
    }

    std::cout << "Press Enter to close..." << std::endl;
    std::cin.get(); // Waits for the user to press Enter

    return 0;
}
