#include <iostream>
#include <string>
#include <windows.h>


//// Function to extract the absolute jump address using RIP-relative addressing
//uint64_t calculateAbsoluteAddress(void* IA, const uint8_t* code) {
//    // Cast the instruction address to a byte pointer
//    const uint8_t* bytes = code;
//
//    // Verify the expected opcode sequence for the jump instruction: 48 FF 25
//    if (bytes[0] == 0x48 && bytes[1] == 0xFF && bytes[2] == 0x25) {
//        // Calculate the address of the next instruction, which is the current address + size of the instruction (7 bytes)
//        uint64_t nextInstructionAddress = reinterpret_cast<uint64_t>(IA) + 7;
//
//        // Extract the 32-bit displacement (signed) from the opcode sequence
//        int32_t displacement = *reinterpret_cast<const int32_t*>(bytes + 3);
//        //print the absolute address in 0x format
//        printf("The absolute address is: 0x%016llX\n", nextInstructionAddress + displacement);
//        
//        // Calculate and return the absolute address
//        return nextInstructionAddress + displacement;
//    }
//    else {
//        // If the opcode sequence does not match, return an error indication (0 typically means an error in pointer contexts)
//        MessageBoxA(NULL, "Unexpected opcode sequence!", "Error", MB_OK | MB_ICONERROR);
//        return 0;
//    }
//}
//
//int main() {
//    // Sample opcode sequence
//    uint8_t code[] = { 0x48, 0xFF, 0x25, 0x39, 0xAD, 0x06, 0x00 };
//
//    // Assume the instruction address, typically you would get this dynamically
//    uint64_t IA = 0x00007FFEADFC9640; // Using the array itself as the address for this example
//
//    uint64_t jumpAddress = calculateAbsoluteAddress((void*)IA, code);
//    if (jumpAddress != 0) {
//        char buffer[64];
//        wsprintfA(buffer, "Calculated jump address: 0x%016llX", jumpAddress);
//        MessageBoxA(NULL, buffer, "Result", MB_OK | MB_ICONINFORMATION);
//    }
//
//    return 0;
//}




int main() {
    std::string input;

    while (true) {
        std::cout << "Enter 'm' for MessageBoxW or 'o' for OutputDebugStringW: ";
        std::getline(std::cin, input);

        if (input == "m") {
            // Call MessageBoxW
            MessageBoxW(NULL, L"MessageBoxW is activated", L"Message Box Title", MB_OK);
        }
        else if (input == "o") {
            // Call OutputDebugStringW
            OutputDebugStringW(L"OutputDebugStringW is activated\n");
        }
    }

    return 0;
}

